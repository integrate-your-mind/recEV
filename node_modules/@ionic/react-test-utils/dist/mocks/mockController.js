"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const MockControllerInner = (_a) => {
    var { children, isOpen, header = '', buttons = [], onDidDismiss, message, forwardedRef } = _a, rest = __rest(_a, ["children", "isOpen", "header", "buttons", "onDidDismiss", "message", "forwardedRef"]);
    const [open, setOpen] = react_1.useState(isOpen);
    react_1.useEffect(() => {
        if (isOpen && !open) {
            setOpen(true);
        }
        else if (!isOpen && open) {
            setOpen(false);
            onDidDismiss && onDidDismiss();
        }
    }, [isOpen]);
    return (isOpen ?
        react_1.default.createElement("div", Object.assign({}, rest, { ref: forwardedRef }),
            header && react_1.default.createElement("h2", null, header),
            message && react_1.default.createElement("p", null, message),
            buttons.map((b, i) => react_1.default.createElement("button", { key: i, onClick: b.handler }, b.text)),
            children && react_1.default.createElement("div", null, children)) : null);
};
exports.mockController = react_1.default.forwardRef((props, ref) => (react_1.default.createElement(MockControllerInner, Object.assign({}, props, { forwardedRef: ref }))));
//# sourceMappingURL=mockController.js.map